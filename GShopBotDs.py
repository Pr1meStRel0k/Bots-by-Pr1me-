##Creating By Pr1me_StRel0k##

import discord
from discord.ext import commands
from discord.ui import Button, View
from discord import app_commands
import json
import asyncio
import datetime

BOT_TOKEN = "Your Bot Token"
GUILD_ID = ID your server
TARGET_CHANNEL_ID = ID your channel

ABOUT_US_TEXT = """Your Text"""

FAQ_TEXT = """Your Text"""

USER_DATA_FILE = "bot_users.json"


music_history = {}
click_counts = {}
user_prizes = {}
prize_list = [
    "Your Text",
    "Your Text",
    "Your Text",
    "Your Text"
              ]

APP_TEXT = """Your Text"""

class MusicView(View):
    def __init__(self, user_id: int):
        super().__init__(timeout=None)
        self.user_id = user_id

    @discord.ui.button(label="üîç –ü–æ–∏—Å–∫", style=discord.ButtonStyle.primary)
    async def search(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", ephemeral=True)

        def check(m):
            return m.author.id == interaction.user.id and isinstance(m.channel, discord.DMChannel)

        try:
            msg = await bot.wait_for("message", check=check, timeout=30)
            query = msg.content
            url = f"https://hitmo.org/search?q={query.replace(' ', '+')}"
            history = music_history.get(interaction.user.id, [])
            history.append(query)
            music_history[interaction.user.id] = history[-10:]
            await interaction.followup.send(f"üîé –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É **{query}**:\n{url}", ephemeral=True)
        except asyncio.TimeoutError:
            await interaction.followup.send("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", ephemeral=True)

    @discord.ui.button(label="üìú –ò—Å—Ç–æ—Ä–∏—è", style=discord.ButtonStyle.secondary)
    async def history(self, interaction: discord.Interaction, button: Button):
        history = music_history.get(interaction.user.id, [])
        if not history:
            await interaction.response.send_message("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", ephemeral=True)
        else:
            await interaction.response.send_message("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n" + "\n".join(history), ephemeral=True)

class GameView(View):
    def __init__(self, user_id: int):
        super().__init__(timeout=None)
        self.user_id = user_id

    @discord.ui.button(label="üëÜ –ö–ª–∏–∫–Ω–∏ –º–µ–Ω—è!", style=discord.ButtonStyle.success)
    async def click(self, interaction: discord.Interaction, button: Button):
        uid = interaction.user.id
        count = click_counts.get(uid, 0) + 1
        click_counts[uid] = count

        import random
        msg = f"–í—ã –∫–ª–∏–∫–Ω—É–ª–∏ {count} —Ä–∞–∑(–∞)!"
        if random.randint(1, 100) == 50:
            prize = random.choice(prize_list)
            user_prizes.setdefault(uid, []).append(prize)
            msg += f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: **{prize}**"
        await interaction.response.send_message(msg, ephemeral=True)

    @discord.ui.button(label="üèÜ –ú–æ–∏ –≤—ã–∏–≥—Ä—ã—à–∏", style=discord.ButtonStyle.secondary)
    async def my_prizes(self, interaction: discord.Interaction, button: Button):
        prizes = user_prizes.get(interaction.user.id, [])
        if not prizes:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π.", ephemeral=True)
        else:
            await interaction.response.send_message("üèÜ –í–∞—à–∏ –≤—ã–∏–≥—Ä—ã—à–∏:\n" + "\n".join(prizes), ephemeral=True)

def load_tracked_users():
    try:
        with open(USER_DATA_FILE, 'r') as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_tracked_users(users_set):
    with open(USER_DATA_FILE, 'w') as f:
        json.dump(list(users_set), f)

tracked_users = load_tracked_users()

def record_user(user_id):
    if user_id not in tracked_users:
        tracked_users.add(user_id)
        save_tracked_users(tracked_users)

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)


user_support_count = {}
user_giveaway_count = {}
user_support_messages = {}
quick_giveaway_participants = set()
user_daily_participation = set()

class GiveawayModal(discord.ui.Modal, title="–£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"):
    discord_contact = discord.ui.TextInput(label="–í–∞—à Discord (–Ω–∞–ø—Ä–∏–º–µ—Ä, username#1234)")
    screenshot_link = discord.ui.TextInput(label="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∫—É–ø–∫–∏ (imgur.com)")

    async def on_submit(self, interaction: discord.Interaction):
        record_user(interaction.user.id)
        target_channel = bot.get_channel(TARGET_CHANNEL_ID)
        if target_channel:
            embed = discord.Embed(title="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à!", color=discord.Color.green())
            embed.add_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:", value=interaction.user.mention, inline=False)
            embed.add_field(name="–ö–æ–Ω—Ç–∞–∫—Ç Discord:", value=self.discord_contact.value, inline=False)
            embed.set_image(url=self.screenshot_link.value)
            embed.set_footer(text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}")
            await target_channel.send(embed=embed)
            await interaction.response.send_message("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

class SupportModal(discord.ui.Modal, title="–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"):
    support_message = discord.ui.TextInput(label="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å", style=discord.TextStyle.long)

    async def on_submit(self, interaction: discord.Interaction):
        record_user(interaction.user.id)
        target_channel = bot.get_channel(TARGET_CHANNEL_ID)
        if target_channel:
            embed = discord.Embed(title="–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!", color=discord.Color.orange())
            embed.add_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:", value=f"{interaction.user.mention} ({interaction.user})", inline=False)
            embed.add_field(name="–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:", value=self.support_message.value, inline=False)
            embed.set_footer(text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}")
            await target_channel.send(embed=embed)
            await interaction.response.send_message("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)


class ProfileView(View):
    def __init__(self, user_id: int):
        super().__init__(timeout=None)
        self.user_id = user_id

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=discord.ButtonStyle.danger)
    async def close(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer()
        await interaction.delete_original_response()

async def send_profile(interaction: discord.Interaction):
    uid = interaction.user.id
    support_count = user_support_count.get(uid, 0)
    giveaway_count = user_giveaway_count.get(uid, 0)
    messages = user_support_messages.get(uid, [])

    embed = discord.Embed(title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {interaction.user}", color=discord.Color.blue())
    embed.add_field(name="–û–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", value=str(support_count), inline=True)
    embed.add_field(name="–£—á–∞—Å—Ç–∏–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö", value=str(giveaway_count), inline=True)

    if messages:
        embed.add_field(name="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:", value="\n".join([f"- {m}" for m in messages[-3:]]), inline=False)

    await interaction.response.send_message(embed=embed, view=ProfileView(uid), ephemeral=True)


class QuickGiveawayView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üé≤ –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É", style=discord.ButtonStyle.success, custom_id="try_luck")
    async def try_luck(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id in user_daily_participation:
            await interaction.response.send_message("‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è!", ephemeral=True)
        else:
            quick_giveaway_participants.add(interaction.user.id)
            user_daily_participation.add(interaction.user.id)
            await interaction.response.send_message("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", ephemeral=True)

async def send_quick_giveaway(interaction: discord.Interaction):
    embed = discord.Embed(
        title="‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à",
        description=(
            "Your Text Here"
            "Your Text Here"
            "Your Text Here"
        ),
        color=discord.Color.gold()
    )
    await interaction.response.send_message(embed=embed, view=QuickGiveawayView(), ephemeral=True)

class MainView(View):
    def __init__(self):
        super().__init__(timeout=None)

    
    @discord.ui.button(label="üéµ –ú—É–∑—ã–∫–∞", style=discord.ButtonStyle.primary, custom_id="music_button")
    async def music(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("üéµ –ú–µ–Ω—é –º—É–∑—ã–∫–∏:", view=MusicView(interaction.user.id), ephemeral=True)

    @discord.ui.button(label="üéÆ –ò–≥—Ä–∞", style=discord.ButtonStyle.success, custom_id="game_button")
    async def game(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—É!", view=GameView(interaction.user.id), ephemeral=True)

    @discord.ui.button(label="üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", style=discord.ButtonStyle.secondary, custom_id="app_button")
    async def app(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message(APP_TEXT, ephemeral=True)

   
    @discord.ui.button(label="üéâ –†–æ–∑—ã–≥—Ä—ã—à", style=discord.ButtonStyle.success, custom_id="giveaway_button")
    async def giveaway(self, interaction: discord.Interaction, button: Button):
        record_user(interaction.user.id)
        await interaction.response.send_modal(GiveawayModal())

    @discord.ui.button(label="üõí –¢–æ–≤–∞—Ä", style=discord.ButtonStyle.primary, custom_id="product_button")
    async def product(self, interaction: discord.Interaction, button: Button):
        record_user(interaction.user.id)
        embed = discord.Embed(title="–ù–∞—à –º–∞–≥–∞–∑–∏–Ω", description="–í–µ—Å—å –ø–µ—Ä–µ—á–µ–Ω—å —Ç–æ–≤–∞—Ä–æ–≤ üëá", color=discord.Color.blue())
        view = View()
        view.add_item(Button(label="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", url="your url"))
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @discord.ui.button(label="üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", style=discord.ButtonStyle.secondary, custom_id="support_button")
    async def support(self, interaction: discord.Interaction, button: Button):
        record_user(interaction.user.id)
        await interaction.response.send_modal(SupportModal())

    @discord.ui.button(label="‚ÑπÔ∏è –û –Ω–∞—Å", style=discord.ButtonStyle.secondary, custom_id="about_button")
    async def about(self, interaction: discord.Interaction, button: Button):
        record_user(interaction.user.id)
        await interaction.response.send_message(ABOUT_US_TEXT, ephemeral=True)

    @discord.ui.button(label="üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏–∏", style=discord.ButtonStyle.secondary, custom_id="guarantees_button")
    async def guarantees(self, interaction: discord.Interaction, button: Button):
        record_user(interaction.user.id)
        await interaction.response.send_message(GUARANTEES_TEXT, ephemeral=True)

    @discord.ui.button(label="üë§ –ü—Ä–æ—Ñ–∏–ª—å", style=discord.ButtonStyle.secondary, custom_id="profile_button")
    async def profile(self, interaction: discord.Interaction, button: Button):
        await send_profile(interaction)

    @discord.ui.button(label="‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à", style=discord.ButtonStyle.success, custom_id="quick_giveaway_button")
    async def quick_giveaway(self, interaction: discord.Interaction, button: Button):
        await send_quick_giveaway(interaction)

    @discord.ui.button(label="‚ùì FAQ", style=discord.ButtonStyle.secondary, custom_id="faq_button")
    async def faq(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message(FAQ_TEXT, ephemeral=True)


async def daily_tasks():
    await bot.wait_until_ready()
    while not bot.is_closed():
        now = datetime.datetime.now()
        draw_time = now.replace(hour=20, minute=0, second=0, microsecond=0)
        reset_time = now.replace(hour=0, minute=0, second=0, microsecond=0)

        if now >= reset_time and now < reset_time + datetime.timedelta(seconds=10):
            quick_giveaway_participants.clear()
            user_daily_participation.clear()
            channel = bot.get_channel(TARGET_CHANNEL_ID)
            if channel:
                await channel.send("üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å! –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–±—Ä–æ—à–µ–Ω—ã.")

        if now >= draw_time and now < draw_time + datetime.timedelta(seconds=10):
            if quick_giveaway_participants:
                import random
                winners = random.sample(list(quick_giveaway_participants), min(10, len(quick_giveaway_participants)))
                winner_mentions = [f"<@{w}>" for w in winners]
                channel = bot.get_channel(TARGET_CHANNEL_ID)
                if channel:
                    embed = discord.Embed(title="üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", description="\n".join(winner_mentions), color=discord.Color.green())
                    await channel.send(embed=embed)
                for w in winners:
                    try:
                        user = await bot.fetch_user(w)
                        await user.send("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º **–±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞**!")
                    except Exception as e:
                                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° {w}: {e}")
            else:
                channel = bot.get_channel(TARGET_CHANNEL_ID)
                if channel:
                    await channel.send("üì¢ –°–µ–≥–æ–¥–Ω—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –±—ã–ª–æ.")

        await asyncio.sleep(10)


@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    bot.add_view(MainView())
    await bot.tree.sync()
    print("–°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    bot.loop.create_task(daily_tasks())

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    if isinstance(message.channel, discord.DMChannel):
        embed = discord.Embed(
            title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            description="–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            color=0x5865F2
        )
        await message.channel.send(embed=embed, view=MainView())
    await bot.process_commands(message)

@bot.command()
@commands.has_permissions(administrator=True)
async def menu(ctx):
    embed = discord.Embed(
        title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
        description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        color=0x5865F2
    )
    await ctx.send(embed=embed, view=MainView())
    if isinstance(ctx.channel, discord.TextChannel):
        await ctx.message.delete()

@bot.tree.command(name="stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞")
@app_commands.checks.has_permissions(administrator=True)
async def stats(interaction: discord.Interaction):
    user_count = len(tracked_users)
    await interaction.response.send_message(
        f"üìà –í—Å–µ–≥–æ –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å: **{user_count}** —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        ephemeral=True
    )

@stats.error
async def on_stats_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.MissingPermissions):
        await interaction.response.send_message(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            ephemeral=True
        )
    else:
        await interaction.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}", ephemeral=True)


bot.run(BOT_TOKEN)



