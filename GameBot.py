##Creating By Pr1me_StRel0k##


import discord
from discord.ext import commands, tasks
from discord import app_commands, ui, ButtonStyle, Interaction, TextStyle
import json
import random
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional


BOT_TOKEN = "Your bot Token"  
ADMIN_ROLE_NAME = "Mod"  
GUILD_ID = ID Your server


DATA_FILE = "data.json"
LOBBIES: Dict[str, dict] = {} 
LOTTERY_TICKETS: List[int] = []  


def load_data() -> dict:
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_data(data: dict):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_user_data(user_id: int) -> dict:
    data = load_data()
    uid = str(user_id)
    if uid not in data:
        data[uid] = {
            "cash": 1000,
            "bank": 0,
            "credit": None,  
            "stats": {
                "total_won": 0,
                "total_spent": 0,
                "last_10_games": []
            },
            "work": {
                "last_worked": None,
                "total_jobs": 0
            },
            "businesses": [],  
        }
        save_data(data)
    return data[uid]

def update_user_data(user_id: int, new_data: dict):
    data = load_data()
    data[str(user_id)] = new_data
    save_data(data)


BUSINESS_TEMPLATES = {
    "kiosk": {"display": "–õ–∞—Ä—ë–∫ (Kiosk)", "base_cost": 5000, "base_income": 200},  
    "cafe": {"display": "–ö–∞—Ñ–µ (Cafe)", "base_cost": 20000, "base_income": 1200},
    "shop": {"display": "–ú–∞–≥–∞–∑–∏–Ω (Shop)", "base_cost": 50000, "base_income": 3500},
    "studio": {"display": "–°—Ç—É–¥–∏—è (Studio)", "base_cost": 120000, "base_income": 10000},
}

def create_business_instance(key: str) -> dict:
    tpl = BUSINESS_TEMPLATES[key]
    return {
        "key": key,
        "name": tpl["display"],
        "level": 1,
        "income": tpl["base_income"],
        "cost": tpl["base_cost"],
        "last_collected": datetime.now().isoformat()
    }


intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)


def format_money(n: float) -> str:
    return f"{int(n):,}"

def generate_lobby_code() -> str:
    while True:
        code = ''.join(random.choices('ABCDEFGHJKLMNPQRSTUVWXYZ23456789', k=5))
        if code not in LOBBIES:
            return code


class GameBotCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.check_credits_and_lottery.start()
        self.business_income_loop.start()


    @app_commands.command(name="balance", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å GSCoin.")
    async def balance(self, interaction: Interaction):
        user_data = get_user_data(interaction.user.id)
        embed = discord.Embed(
            title=f"–ë–∞–ª–∞–Ω—Å {interaction.user.display_name} üí≥",
            color=discord.Color.gold()
        )
        embed.add_field(name="–ù–∞–ª–∏—á–Ω—ã–µ", value=f"üí∞ {format_money(user_data['cash'])} GSCoin", inline=True)
        embed.add_field(name="–í –±–∞–Ω–∫–µ", value=f"üè¶ {format_money(user_data['bank'])} GSCoin", inline=True)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="pay", description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ GSCoin –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.")
    @app_commands.describe(member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏.", amount="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")
    async def pay(self, interaction: Interaction, member: discord.Member, amount: int):
        if amount <= 0:
            await interaction.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
            return
        if member.id == interaction.user.id:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!", ephemeral=True)
            return

        sender_data = get_user_data(interaction.user.id)
        if sender_data['cash'] < amount:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞!", ephemeral=True)
            return

        receiver_data = get_user_data(member.id)
        sender_data['cash'] -= amount
        receiver_data['cash'] += amount
        update_user_data(interaction.user.id, sender_data)
        update_user_data(member.id, receiver_data)

        await interaction.response.send_message(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {format_money(amount)} GSCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}!")
        try:
            await member.send(f"üí∏ –í–∞–º –ø—Ä–∏—à–µ–ª –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {format_money(amount)} GSCoin –æ—Ç {interaction.user.mention}!")
        except discord.Forbidden:
            pass
            
    @app_commands.command(name="bank", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Å—á–µ—Ç–æ–º (–¥–µ–ø–æ–∑–∏—Ç, —Å–Ω—è—Ç–∏–µ).")
    async def bank(self, interaction: Interaction):
        user_data = get_user_data(interaction.user.id)

        class AmountModal(ui.Modal, title="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"):
            amount_input = ui.TextInput(label="–°—É–º–º–∞", style=TextStyle.short, placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ...")

            def __init__(self, operation: str):
                super().__init__()
                self.operation = operation

            async def on_submit(self, interaction: Interaction):
                try:
                    amount = int(self.amount_input.value)
                    if amount <= 0:
                        raise ValueError
                except ValueError:
                    await interaction.response.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", ephemeral=True)
                    return
                
                user_data = get_user_data(interaction.user.id)
                
                if self.operation == 'deposit':
                    if user_data['cash'] < amount:
                        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö.", ephemeral=True)
                        return
                    user_data['cash'] -= amount
                    user_data['bank'] += amount
                    update_user_data(interaction.user.id, user_data)
                    await interaction.response.send_message(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ {format_money(amount)} GSCoin –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç.", ephemeral=True)
                
                elif self.operation == 'withdraw':
                    if user_data['bank'] < amount:
                        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ.", ephemeral=True)
                        return
                    user_data['bank'] -= amount
                    user_data['cash'] += amount
                    update_user_data(interaction.user.id, user_data)
                    await interaction.response.send_message(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {format_money(amount)} GSCoin —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞.", ephemeral=True)

        class BankView(ui.View):
            def __init__(self):
                super().__init__(timeout=180)

            @ui.button(label="–ü–æ–ª–æ–∂–∏—Ç—å", style=ButtonStyle.success, emoji="üì•")
            async def deposit_button(self, interaction: Interaction, button: ui.Button):
                await interaction.response.send_modal(AmountModal(operation='deposit'))
                self.stop()
            
            @ui.button(label="–°–Ω—è—Ç—å", style=ButtonStyle.danger, emoji="üì§")
            async def withdraw_button(self, interaction: Interaction, button: ui.Button):
                await interaction.response.send_modal(AmountModal(operation='withdraw'))
                self.stop()

        embed = discord.Embed(title="üè¶ –í–∞—à –ë–∞–Ω–∫", description="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", color=discord.Color.blue())
        embed.add_field(name="–ù–∞–ª–∏—á–Ω—ã–µ", value=f"üí∞ {format_money(user_data['cash'])} GSCoin")
        embed.add_field(name="–í –±–∞–Ω–∫–µ", value=f"üè¶ {format_money(user_data['bank'])} GSCoin")
        
        await interaction.response.send_message(embed=embed, view=BankView(), ephemeral=True)

    @app_commands.command(name="leaderstats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É.")
    async def leaderstats(self, interaction: Interaction):
        data = load_data()
        if not data:
            await interaction.response.send_message("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.", ephemeral=True)
            return

        sorted_users = sorted(
            data.items(),
            key=lambda item: item[1].get('cash', 0) + item[1].get('bank', 0),
            reverse=True
        )

        embed = discord.Embed(title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤", description="–¢–æ–ø-10 —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", color=discord.Color.blurple())

        for i, (user_id, udata) in enumerate(sorted_users[:10]):
            try:
                user = await self.bot.fetch_user(int(user_id))
                total_balance = udata.get('cash', 0) + udata.get('bank', 0)
                embed.add_field(name=f"{i+1}. {user.display_name}", value=f"üí∞ {format_money(total_balance)} GSCoin", inline=False)
            except discord.NotFound:
                continue

        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="stats", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    async def stats(self, interaction: Interaction):
        user_data = get_user_data(interaction.user.id)
        stats = user_data['stats']

        embed = discord.Embed(title=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {interaction.user.display_name}", color=discord.Color.green())
        embed.add_field(name="–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ", value=f"üèÜ {format_money(stats['total_won'])} GSCoin")
        embed.add_field(name="–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ/–ø—Ä–æ–∏–≥—Ä–∞–Ω–æ", value=f"üí∏ {format_money(stats['total_spent'])} GSCoin")

        last_games = " | ".join(stats['last_10_games']) if stats['last_10_games'] else "–ï—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏"
        embed.add_field(name="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä", value=last_games, inline=False)

        await interaction.response.send_message(embed=embed, ephemeral=True)

    
    @app_commands.command(name="work", description="–ü–æ–π—Ç–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å GSCoin.")
    async def work(self, interaction: Interaction):
        user_data = get_user_data(interaction.user.id)

        if user_data['work']['last_worked']:
            last_worked_time = datetime.fromisoformat(user_data['work']['last_worked'])
            if datetime.now() < last_worked_time + timedelta(days=1):
                await interaction.response.send_message("–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.", ephemeral=True)
                return

        class WorkView(ui.View):
            def __init__(self, user_data):
                super().__init__(timeout=180)
                self.user_data = user_data

            async def handle_work(self, interaction: Interaction, job_name: str, salary: int, duration: int):
                await interaction.response.defer(thinking=True, ephemeral=True)
                await asyncio.sleep(duration)

                self.user_data['cash'] += salary
                self.user_data['work']['last_worked'] = datetime.now().isoformat()
                self.user_data['work']['total_jobs'] += 1
                update_user_data(interaction.user.id, self.user_data)

                await interaction.followup.send(f"‚úÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ '{job_name}' –æ–∫–æ–Ω—á–µ–Ω! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {format_money(salary)} GSCoin.", ephemeral=True)
                self.stop()

            @ui.button(label="–ì—Ä—É–∑—á–∏–∫ (1,000 GSCoin)", style=ButtonStyle.secondary)
            async def loader_button(self, interaction: Interaction, button: ui.Button):
                await self.handle_work(interaction, "–ì—Ä—É–∑—á–∏–∫", 1000, 5)

            @ui.button(label="Admin group (5,000 GSCoin)", style=ButtonStyle.secondary)
            async def admin_button(self, interaction: Interaction, button: ui.Button):
                await self.handle_work(interaction, "Admin group", 5000, 10)

            @ui.button(label="Programmer (10,000 GSCoin)", style=ButtonStyle.primary)
            async def programmer_button(self, interaction: Interaction, button: ui.Button):
                await self.handle_work(interaction, "Programmer", 10000, 15)

            @ui.button(label="–°–æ–∑–¥–∞—Ç–µ–ª—å GShop (100,000 GSCoin)", style=ButtonStyle.success, disabled=user_data['work']['total_jobs'] < 30)
            async def creator_button(self, interaction: Interaction, button: ui.Button):
                await self.handle_work(interaction, "–°–æ–∑–¥–∞—Ç–µ–ª—å GShop", 100000, 30)

        embed = discord.Embed(title="üíº –ë–∏—Ä–∂–∞ —Ç—Ä—É–¥–∞", description="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.", color=discord.Color.dark_blue())
        embed.set_footer(text=f"–í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–º–µ–Ω: {user_data['work']['total_jobs']}")
        await interaction.response.send_message(embed=embed, view=WorkView(user_data), ephemeral=True)

    
    @app_commands.command(name="credit", description="–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç.")
    @app_commands.describe(amount="–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", days="–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π.")
    async def credit(self, interaction: Interaction, amount: int, days: int):
        if amount <= 0 or days <= 0:
            await interaction.response.send_message("–°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!", ephemeral=True)
            return

        user_data = get_user_data(interaction.user.id)
        if user_data['credit'] is not None:
            await interaction.response.send_message("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç!", ephemeral=True)
            return

        amount_to_repay = amount * 1.10
        due_date = datetime.now() + timedelta(days=days)

        user_data['cash'] += amount
        user_data['credit'] = {
            "amount_owed": round(amount_to_repay, 2),
            "due_date": due_date.isoformat()
        }
        update_user_data(interaction.user.id, user_data)

        embed = discord.Embed(title="‚úÖ –ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω!", color=discord.Color.green())
        embed.add_field(name="–ü–æ–ª—É—á–µ–Ω–æ", value=f"{format_money(amount)} GSCoin")
        embed.add_field(name="–°—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É", value=f"{amount_to_repay:,.2f} GSCoin")
        embed.add_field(name="–í–µ—Ä–Ω—É—Ç—å –¥–æ", value=due_date.strftime("%d.%m.%Y"))
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="rcredit", description="–û–ø–ª–∞—Ç–∏—Ç—å —á–∞—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞.")
    @app_commands.describe(amount="–°—É–º–º–∞ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è.")
    async def rcredit(self, interaction: Interaction, amount: int):
        if amount <= 0:
            await interaction.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
            return

        user_data = get_user_data(interaction.user.id)
        if user_data['credit'] is None:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤.", ephemeral=True)
            return

        if user_data['cash'] < amount:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã.", ephemeral=True)
            return

        user_data['cash'] -= amount
        user_data['credit']['amount_owed'] = round(user_data['credit']['amount_owed'] - amount, 2)

        if user_data['credit']['amount_owed'] <= 0:
            remaining_cash = abs(user_data['credit']['amount_owed'])
            user_data['cash'] += remaining_cash
            user_data['credit'] = None
            message = f"üéâ –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—Å–∏–ª–∏ –∫—Ä–µ–¥–∏—Ç! –°–¥–∞—á–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {remaining_cash:,.2f} GSCoin –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à —Å—á–µ—Ç."
        else:
            message = f"‚úÖ –í—ã –≤–Ω–µ—Å–ª–∏ {format_money(amount)} GSCoin. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç—å: {user_data['credit']['amount_owed']:,.2f} GSCoin."

        update_user_data(interaction.user.id, user_data)
        await interaction.response.send_message(message)

    
    @app_commands.command(name="lottery", description="–ö—É–ø–∏—Ç—å –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç.")
    @app_commands.describe(tickets="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ (1 –±–∏–ª–µ—Ç = 1,000 GSCoin).")
    async def lottery(self, interaction: Interaction, tickets: int = 1):
        if tickets <= 0:
            await interaction.response.send_message("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.", ephemeral=True)
            return

        cost = tickets * 1000
        user_data = get_user_data(interaction.user.id)

        if user_data['cash'] < cost:
            await interaction.response.send_message(f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {format_money(cost - user_data['cash'])} GSCoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤.", ephemeral=True)
            return

        user_data['cash'] -= cost
        update_user_data(interaction.user.id, user_data)

        global LOTTERY_TICKETS
        for _ in range(tickets):
            LOTTERY_TICKETS.append(interaction.user.id)

        await interaction.response.send_message(f"üéüÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {tickets} –ª–æ—Ç–µ—Ä–µ–π–Ω—ã—Ö –±–∏–ª–µ—Ç–∞(–æ–≤) –∑–∞ {format_money(cost)} GSCoin! –£–¥–∞—á–∏!")

    
    @app_commands.command(name="slots", description="–°—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É.")
    @app_commands.describe(bet="–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞.")
    async def slots(self, interaction: Interaction, bet: int):
        if bet <= 0:
            await interaction.response.send_message("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
            return
            
        user_data = get_user_data(interaction.user.id)
        if user_data['cash'] < bet:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.", ephemeral=True)
            return
            
        emojis = ['üçí', 'üçã', 'üîî', 'üí∞', '‚≠ê']
        results = random.choices(emojis, k=3)
        
        result_str = f"| {results[0]} | {results[1]} | {results[2]} |"
        
        embed = discord.Embed(title="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ üé∞", color=discord.Color.dark_orange())
        embed.add_field(name="–†–µ–∑—É–ª—å—Ç–∞—Ç", value=result_str, inline=False)

        winnings = 0
        outcome_msg = ""
        
        if results[0] == results[1] == results[2]: 
            winnings = bet * 10
            outcome_msg = f"üéâ –î–ñ–ï–ö–ü–û–¢! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_money(winnings)} GSCoin!"
            embed.color = discord.Color.gold()
        elif results[0] == results[1] or results[1] == results[2]: 
            winnings = bet * 2
            outcome_msg = f"üëç –ù–µ–±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {format_money(winnings)} GSCoin!"
            embed.color = discord.Color.green()
        
        if winnings > 0:
            user_data['cash'] += (winnings - bet)
            user_data['stats']['total_won'] += winnings
            user_data['stats']['last_10_games'].insert(0, f"Win Slots (+{format_money(winnings-bet)})")
        else:
            user_data['cash'] -= bet
            user_data['stats']['total_spent'] += bet
            user_data['stats']['last_10_games'].insert(0, f"Lose Slots (-{format_money(bet)})")
            outcome_msg = f"üòï –£–≤—ã, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {format_money(bet)} GSCoin."
            embed.color = discord.Color.red()
        
        user_data['stats']['last_10_games'] = user_data['stats']['last_10_games'][:10]
        update_user_data(interaction.user.id, user_data)
        
        embed.add_field(name="–ò—Ç–æ–≥", value=outcome_msg, inline=False)
        embed.set_footer(text=f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_money(user_data['cash'])} GSCoin")
        
        await interaction.response.send_message(embed=embed)

    
    @app_commands.command(name="business", description="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã –∏ –≤–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã.")
    async def business(self, interaction: Interaction):
        user_data = get_user_data(interaction.user.id)

        embed = discord.Embed(title="üè¨ –ë–∏–∑–Ω–µ—Å—ã", description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤ –∏ –≤–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã.", color=discord.Color.teal())
        available = ""
        for k, tpl in BUSINESS_TEMPLATES.items():
            available += f"**{tpl['display']}** ‚Äî —Ü–µ–Ω–∞: {format_money(tpl['base_cost'])}, –¥–æ—Ö–æ–¥/—á–∞—Å: {format_money(tpl['base_income'])}\n"
        embed.add_field(name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã", value=available, inline=False)

        if user_data['businesses']:
            mybs = ""
            for b in user_data['businesses']:
                mybs += f"{b['name']} ‚Äî —É—Ä–æ–≤–µ–Ω—å {b['level']}, –¥–æ—Ö–æ–¥/—á–∞—Å {format_money(b['income'])}, –∫—É–ø–ª–µ–Ω–∞: {b['last_collected'][:10]}\n"
        else:
            mybs = "–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤."

        embed.add_field(name="–í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã", value=mybs, inline=False)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="buy_business", description="–ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å.")
    @app_commands.describe(business_key="–ö–ª—é—á –±–∏–∑–Ω–µ—Å–∞ (kiosk, cafe, shop, studio)")
    async def buy_business(self, interaction: Interaction, business_key: str):
        key = business_key.lower()
        if key not in BUSINESS_TEMPLATES:
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –±–∏–∑–Ω–µ—Å–∞. –î–æ—Å—Ç—É–ø–Ω–æ: kiosk, cafe, shop, studio", ephemeral=True)
            return

        user_data = get_user_data(interaction.user.id)
        cost = BUSINESS_TEMPLATES[key]["base_cost"]
        if user_data['cash'] < cost:
            await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –ù—É–∂–Ω–æ {format_money(cost)} GSCoin.", ephemeral=True)
            return

        user_data['cash'] -= cost
        newb = create_business_instance(key)
        user_data['businesses'].append(newb)
        update_user_data(interaction.user.id, user_data)

        await interaction.response.send_message(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å: {newb['name']} –∑–∞ {format_money(cost)} GSCoin", ephemeral=True)

    @app_commands.command(name="upgrade_business", description="–£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å).")
    @app_commands.describe(index="–ù–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞—á–∏–Ω–∞—è —Å 1).")
    async def upgrade_business(self, interaction: Interaction, index: int):
        user_data = get_user_data(interaction.user.id)
        if index <= 0 or index > len(user_data['businesses']):
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–∏–∑–Ω–µ—Å–∞.", ephemeral=True)
            return

        b = user_data['businesses'][index - 1]
        upgrade_cost = int(b['cost'] * 0.7 * b['level'])
        if user_data['cash'] < upgrade_cost:
            await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –ù—É–∂–Ω–æ {format_money(upgrade_cost)} GSCoin.", ephemeral=True)
            return

        user_data['cash'] -= upgrade_cost
        b['level'] += 1
        b['income'] = int(b['income'] * 1.45)
        b['cost'] = int(b['cost'] * 1.6)
        update_user_data(interaction.user.id, user_data)

        await interaction.response.send_message(f"‚úÖ –ë–∏–∑–Ω–µ—Å '{b['name']}' —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {b['level']}. –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞: {format_money(upgrade_cost)} GSCoin", ephemeral=True)

    @app_commands.command(name="sell_business", description="–ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å (–ø–æ–ª—É—á–∞–µ—Ç–µ 50% –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏).")
    @app_commands.describe(index="–ù–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞—á–∏–Ω–∞—è —Å 1).")
    async def sell_business(self, interaction: Interaction, index: int):
        user_data = get_user_data(interaction.user.id)
        if index <= 0 or index > len(user_data['businesses']):
            await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–∏–∑–Ω–µ—Å–∞.", ephemeral=True)
            return

        b = user_data['businesses'].pop(index - 1)
        sell_price = int(b['cost'] * 0.5)
        user_data['cash'] += sell_price
        update_user_data(interaction.user.id, user_data)

        await interaction.response.send_message(f"üü§ –í—ã –ø—Ä–æ–¥–∞–ª–∏ '{b['name']}' –∑–∞ {format_money(sell_price)} GSCoin.", ephemeral=True)

    @app_commands.command(name="collect_business", description="–°–æ–±—Ä–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å–æ–≤ (—Ä—É—á–Ω–æ–π —Å–±–æ—Ä).")
    async def collect_business(self, interaction: Interaction):
        user_data = get_user_data(interaction.user.id)
        if not user_data['businesses']:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤.", ephemeral=True)
            return

        total_collected = 0
        now = datetime.now()
        for b in user_data['businesses']:
            last = datetime.fromisoformat(b.get('last_collected', now.isoformat()))
            hours = int((now - last).total_seconds() // 3600)
            if hours > 0:
                gained = b['income'] * hours
                total_collected += gained
                b['last_collected'] = now.isoformat()

        if total_collected <= 0:
            await interaction.response.send_message("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Ö–æ–¥–∞ –¥–ª—è —Å–±–æ—Ä–∞ (–º–µ–Ω—å—à–µ —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞).", ephemeral=True)
            return

        user_data['cash'] += total_collected
        update_user_data(interaction.user.id, user_data)

        await interaction.response.send_message(f"üí∞ –í—ã —Å–æ–±—Ä–∞–ª–∏ {format_money(total_collected)} GSCoin —Å –≤–∞—à–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤.", ephemeral=True)

   
    @app_commands.command(name="lobby_create", description="–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ –¥–ª—è –∏–≥—Ä—ã.")
    @app_commands.describe(max_players="–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ (2-8).", ante="–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –∑–∞ –∏–≥—Ä—É (GSCoin).")
    async def lobby_create(self, interaction: Interaction, max_players: int = 4, ante: int = 100):
        if max_players < 2 or max_players > 8:
            await interaction.response.send_message("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 8.", ephemeral=True)
            return
        if ante < 0:
            await interaction.response.send_message("–ê–Ω—Ç–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.", ephemeral=True)
            return

        code = generate_lobby_code()
        LOBBIES[code] = {
            "host": interaction.user.id,
            "players": [interaction.user.id],
            "max": max_players,
            "ante": ante,
            "started": False
        }

        class LobbyView(ui.View):
            def __init__(self, code):
                super().__init__(timeout=None)
                self.code = code

            @ui.button(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", style=ButtonStyle.primary)
            async def join_button(self, interaction: Interaction, button: ui.Button):
                lobby = LOBBIES.get(self.code)
                if not lobby:
                    await interaction.response.send_message("–õ–æ–±–±–∏ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", ephemeral=True)
                    return
                if interaction.user.id in lobby['players']:
                    await interaction.response.send_message("–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏.", ephemeral=True)
                    return
                if len(lobby['players']) >= lobby['max']:
                    await interaction.response.send_message("–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.", ephemeral=True)
                    return
                
                user_data = get_user_data(interaction.user.id)
                if user_data['cash'] < lobby['ante']:
                    await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è (–Ω—É–∂–Ω–æ {format_money(lobby['ante'])}).", ephemeral=True)
                    return

                lobby['players'].append(interaction.user.id)
                await interaction.response.send_message(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ {self.code}.", ephemeral=True)

        embed = discord.Embed(title=f"–õ–æ–±–±–∏ {code}", description=f"–•–æ—Å—Ç: {interaction.user.display_name}\n–ò–≥—Ä–æ–∫–∏: 1/{max_players}\n–ê–Ω—Ç–µ: {format_money(ante)} GSCoin", color=discord.Color.dark_purple())
        await interaction.response.send_message(embed=embed, view=LobbyView(code))
    
    @app_commands.command(name="lobby_list", description="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏.")
    async def lobby_list(self, interaction: Interaction):
        if not LOBBIES:
            await interaction.response.send_message("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏.", ephemeral=True)
            return
        txt = ""
        for code, l in LOBBIES.items():
            txt += f"{code} ‚Äî {len(l['players'])}/{l['max']} –∏–≥—Ä–æ–∫–æ–≤, –∞–Ω—Ç–µ {format_money(l['ante'])}\n"
        embed = discord.Embed(title="–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏", description=txt, color=discord.Color.blurple())
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="lobby_join", description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏ –ø–æ –∫–æ–¥—É.")
    @app_commands.describe(code="–ö–æ–¥ –ª–æ–±–±–∏.")
    async def lobby_join(self, interaction: Interaction, code: str):
        code = code.upper()
        lobby = LOBBIES.get(code)
        if not lobby:
            await interaction.response.send_message("–õ–æ–±–±–∏ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
            return
        if interaction.user.id in lobby['players']:
            await interaction.response.send_message("–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏.", ephemeral=True)
            return
        if len(lobby['players']) >= lobby['max']:
            await interaction.response.send_message("–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.", ephemeral=True)
            return

        user_data = get_user_data(interaction.user.id)
        if user_data['cash'] < lobby['ante']:
            await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É—á–∞—Å—Ç–∏—è (–Ω—É–∂–Ω–æ {format_money(lobby['ante'])}).", ephemeral=True)
            return

        lobby['players'].append(interaction.user.id)
        await interaction.response.send_message(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ {code}.", ephemeral=True)

    @app_commands.command(name="lobby_leave", description="–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏ –ø–æ –∫–æ–¥—É.")
    @app_commands.describe(code="–ö–æ–¥ –ª–æ–±–±–∏.")
    async def lobby_leave(self, interaction: Interaction, code: str):
        code = code.upper()
        lobby = LOBBIES.get(code)
        if not lobby:
            await interaction.response.send_message("–õ–æ–±–±–∏ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
            return
        if interaction.user.id not in lobby['players']:
            await interaction.response.send_message("–í—ã –Ω–µ –≤ —ç—Ç–æ–º –ª–æ–±–±–∏.", ephemeral=True)
            return

        lobby['players'].remove(interaction.user.id)
        await interaction.response.send_message("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏.", ephemeral=True)

    @app_commands.command(name="lobby_start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –≤ –ª–æ–±–±–∏ (—Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç).")
    @app_commands.describe(code="–ö–æ–¥ –ª–æ–±–±–∏.")
    async def lobby_start(self, interaction: Interaction, code: str):
        code = code.upper()
        lobby = LOBBIES.get(code)
        if not lobby:
            await interaction.response.send_message("–õ–æ–±–±–∏ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
            return
        if interaction.user.id != lobby['host']:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É.", ephemeral=True)
            return
        if lobby['started']:
            await interaction.response.send_message("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —ç—Ç–æ–º –ª–æ–±–±–∏.", ephemeral=True)
            return
        if len(lobby['players']) < 2:
            await interaction.response.send_message("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", ephemeral=True)
            return

        for uid in list(lobby['players']):
            udata = get_user_data(uid)
            if udata['cash'] < lobby['ante']:
                lobby['players'].remove(uid)
                try:
                    user = await self.bot.fetch_user(uid)
                    await user.send(f"–í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ª–æ–±–±–∏ {code}, —Ç.–∫. —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∞–Ω—Ç–µ {format_money(lobby['ante'])}.")
                except Exception:
                    pass

        if len(lobby['players']) < 2:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–µ–Ω—å–≥–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.", ephemeral=True)
            return

        pot = 0
        for uid in lobby['players']:
            udata = get_user_data(uid)
            udata['cash'] -= lobby['ante']
            update_user_data(uid, udata)
            pot += lobby['ante']

        lobby['started'] = True
        await interaction.response.send_message(f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –≤ –ª–æ–±–±–∏ {code}! –ò–≥—Ä–∞: High Card Duel. –ë–∞–Ω–∫: {format_money(pot)} GSCoin. –°–µ–π—á–∞—Å —Ç—è–Ω–µ–º –∫–∞—Ä—Ç—ã...", ephemeral=False)

        results = []
        for uid in lobby['players']:
            card = random.randint(1, 13)
            results.append((uid, card))
        results_sorted = sorted(results, key=lambda x: x[1], reverse=True)
        top_value = results_sorted[0][1]
        winners = [uid for (uid, val) in results_sorted if val == top_value]

        if len(winners) == 1:
            winner = winners[0]
            winner_data = get_user_data(winner)
            winner_data['cash'] += pot
            winner_data['stats']['total_won'] += pot
            winner_data['stats']['last_10_games'].insert(0, f"Win {format_money(pot)} in {code}")
            winner_data['stats']['last_10_games'] = winner_data['stats']['last_10_games'][:10]
            update_user_data(winner, winner_data)

            txt = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n"
            for uid, card in results:
                try:
                    user = await self.bot.fetch_user(uid)
                    txt += f"{user.display_name}: {card}\n"
                except Exception:
                    txt += f"{uid}: {card}\n"
            winner_user = await self.bot.fetch_user(winner)
            await interaction.followup.send(txt)
            await interaction.followup.send(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_user.mention}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {format_money(pot)} GSCoin!")
        else:
            share = pot // len(winners)
            for w in winners:
                wd = get_user_data(w)
                wd['cash'] += share
                wd['stats']['total_won'] += share
                wd['stats']['last_10_games'].insert(0, f"Split {format_money(share)} in {code}")
                wd['stats']['last_10_games'] = wd['stats']['last_10_games'][:10]
                update_user_data(w, wd)

            txt = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∏—á—å—è, –¥–µ–ª–∏–º –±–∞–Ω–∫):\n"
            for uid, card in results:
                try:
                    user = await self.bot.fetch_user(uid)
                    txt += f"{user.display_name}: {card}\n"
                except Exception:
                    txt += f"{uid}: {card}\n"
            await interaction.followup.send(txt)
            winner_mentions = ", ".join([(await self.bot.fetch_user(w)).mention for w in winners])
            await interaction.followup.send(f"ü§ù –ù–∏—á—å—è! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winner_mentions}. –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç {format_money(share)} GSCoin.")

        for uid, card in results:
            if uid not in winners:
                ud = get_user_data(uid)
                ud['stats']['total_spent'] += lobby['ante']
                ud['stats']['last_10_games'].insert(0, f"Lose {format_money(lobby['ante'])} in {code}")
                ud['stats']['last_10_games'] = ud['stats']['last_10_games'][:10]
                update_user_data(uid, ud)

        try:
            del LOBBIES[code]
        except KeyError:
            pass

    
    @app_commands.command(name="pcoin", description="[–ê–¥–º–∏–Ω] –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é GSCoin.")
    @app_commands.checks.has_role("id admin role here")
    async def pcoin(self, interaction: Interaction, member: discord.Member, amount: int):
        if amount <= 0:
            await interaction.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
            return

        user_data = get_user_data(member.id)
        user_data['cash'] += amount
        update_user_data(member.id, user_data)
        await interaction.response.send_message(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {format_money(amount)} GSCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}.", ephemeral=True)

    @app_commands.command(name="scoin", description="[–ê–¥–º–∏–Ω] –°–ø–∏—Å–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GSCoin.")
    @app_commands.checks.has_role("id admin role here")
    async def scoin(self, interaction: Interaction, member: discord.Member, amount: int):
        if amount <= 0:
            await interaction.response.send_message("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!", ephemeral=True)
            return

        user_data = get_user_data(member.id)
        user_data['cash'] -= amount
        update_user_data(member.id, user_data)
        await interaction.response.send_message(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {format_money(amount)} GSCoin —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}.", ephemeral=True)

    @app_commands.command(name="reset", description="[–ê–¥–º–∏–Ω] –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @app_commands.checks.has_role("id admin role here")
    async def reset(self, interaction: Interaction, member: discord.Member):
        data = load_data()
        user_id_str = str(member.id)
        if user_id_str in data:
            del data[user_id_str]
            save_data(data)
            await interaction.response.send_message(f"üóëÔ∏è –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.", ephemeral=True)
        else:
            await interaction.response.send_message("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞–∫ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)

    
    @tasks.loop(hours=24)
    async def check_credits_and_lottery(self):
        data = load_data()
        updated = False
        for user_id_str, user_data in data.items():
            if user_data.get('credit'):
                due_date = datetime.fromisoformat(user_data['credit']['due_date'])
                if datetime.now() > due_date:
                    user_data['credit']['amount_owed'] = round(user_data['credit']['amount_owed'] * 1.05, 2)
                    updated = True
                    try:
                        user = await self.bot.fetch_user(int(user_id_str))
                        await user.send(f"‚ö†Ô∏è **–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É!** –í–∞—à –¥–æ–ª–≥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 5% –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {user_data['credit']['amount_owed']:,.2f} GSCoin.")
                    except (discord.NotFound, discord.Forbidden):
                        pass
        if updated:
            save_data(data)

        if datetime.now().weekday() == 6: 
            global LOTTERY_TICKETS
            if LOTTERY_TICKETS:
                winner_id = random.choice(LOTTERY_TICKETS)
                prize_pool = len(LOTTERY_TICKETS) * 1000
                winner_data = get_user_data(winner_id)
                winner_data['cash'] += prize_pool
                update_user_data(winner_id, winner_data)
                try:
                    winner_user = await self.bot.fetch_user(winner_id)
                    await winner_user.send(f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–µ! –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {format_money(prize_pool)} GSCoin!")
                except (discord.NotFound, discord.Forbidden):
                    pass
                LOTTERY_TICKETS = []

    @tasks.loop(minutes=60)
    async def business_income_loop(self):
        data = load_data()
        updated = False
        for uid_str, udata in data.items():
            businesses = udata.get('businesses', [])
            if not businesses:
                continue
            now = datetime.now()
            total_gain = 0
            for b in businesses:
                last = datetime.fromisoformat(b.get('last_collected', now.isoformat()))
                hours = int((now - last).total_seconds() // 3600)
                if hours > 0:
                    gain = b['income'] * hours
                    total_gain += gain
                    b['last_collected'] = now.isoformat()
            if total_gain > 0:
                udata['cash'] += total_gain
                updated = True
                try:
                    user = await self.bot.fetch_user(int(uid_str))
                    await user.send(f"üíº –ê–≤—Ç–æ—Å–±–æ—Ä: –í—ã –ø–æ–ª—É—á–∏–ª–∏ {format_money(total_gain)} GSCoin —Å –≤–∞—à–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤.")
                except (discord.NotFound, discord.Forbidden):
                    pass
        if updated:
            save_data(data)

    @check_credits_and_lottery.before_loop
    async def before_check_credits(self):
        await self.bot.wait_until_ready()

    @business_income_loop.before_loop
    async def before_business_loop(self):
        await self.bot.wait_until_ready()

    def cog_unload(self):
        self.check_credits_and_lottery.cancel()
        self.business_income_loop.cancel()


@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    print('--------------------------------')
    try:
        await bot.add_cog(GameBotCog(bot))
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ COG:", e)
    guild = discord.Object(id=GUILD_ID)
    bot.tree.copy_global_to(guild=guild)
    await bot.tree.sync(guild=guild)
    print("–ö–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")


if __name__ == "__main__":
    bot.run(BOT_TOKEN)

