##Creating By Pr1me_StRel0k##

import discord
from discord.ext import commands, tasks
from discord import app_commands
import asyncio
import aiohttp
import sqlite3
import random
import datetime
import time


GUILD_ID = Your Channel ID
ADMIN_USER_ID = Your Admin User ID

ROLE_UNVERIFIED = ID Unverified Role
ROLE_VERIFIED = ID Verified Role
CHANNEL_WELCOME = ID Welcome Channel
CHANNEL_MOD_LOGS = ID Logs Channel



guard_mode_active = False

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)


conn = sqlite3.connect("defender.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    funpay TEXT,
    roblox TEXT,
    verified INTEGER DEFAULT 0,
    trust_points INTEGER DEFAULT 0,
    swarns INTEGER DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS warnings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    moderator_id INTEGER NOT NULL,
    reason_type TEXT NOT NULL,
    issued_at INTEGER NOT NULL,
    expires_at INTEGER
)
""")
conn.commit()


cursor.execute("PRAGMA table_info(users)")
columns = [column[1] for column in cursor.fetchall()]
if 'swarns' not in columns:
    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î: –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∞ 'swarns'...")
    cursor.execute("ALTER TABLE users ADD COLUMN swarns INTEGER DEFAULT 0")
    conn.commit()
    print("–ö–æ–ª–æ–Ω–∫–∞ 'swarns' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")


def save_user(user_id: int, funpay: str = None, roblox: str = None, verified: int = None):
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    if funpay is not None: cursor.execute("UPDATE users SET funpay = ? WHERE user_id = ?", (funpay, user_id))
    if roblox is not None: cursor.execute("UPDATE users SET roblox = ? WHERE user_id = ?", (roblox, user_id))
    if verified is not None: cursor.execute("UPDATE users SET verified = ? WHERE user_id = ?", (verified, user_id))
    conn.commit()

def get_user(user_id: int):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

def add_trust(user_id: int, points: int = 1):
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    cursor.execute("UPDATE users SET trust_points = trust_points + ? WHERE user_id = ?", (points, user_id))
    conn.commit()

def add_warning(user_id: int, moderator_id: int, reason_type: str, duration_days: int = None):
    issued_at = int(time.time())
    expires_at = issued_at + (duration_days * 86400) if duration_days else None
    cursor.execute("INSERT INTO warnings (user_id, moderator_id, reason_type, issued_at, expires_at) VALUES (?, ?, ?, ?, ?)",
                   (user_id, moderator_id, reason_type, issued_at, expires_at))
    conn.commit()

def get_active_warnings(user_id: int, reason_type: str):
    current_time = int(time.time())
    cursor.execute("SELECT COUNT(*) FROM warnings WHERE user_id = ? AND reason_type = ? AND (expires_at IS NULL OR expires_at > ?)",
                   (user_id, reason_type, current_time))
    return cursor.fetchone()[0]

def add_swarn(user_id: int, amount: int = 1):
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    cursor.execute("UPDATE users SET swarns = swarns + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    cursor.execute("SELECT swarns FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()[0]

def remove_warnings(user_id: int, amount: int):
    cursor.execute("SELECT id FROM warnings WHERE user_id = ? ORDER BY issued_at DESC LIMIT ?", (user_id, amount))
    warns_to_delete = cursor.fetchall()
    for warn_id in warns_to_delete:
        cursor.execute("DELETE FROM warnings WHERE id = ?", (warn_id[0],))
    conn.commit()
    return len(warns_to_delete)

def remove_swarns(user_id: int, amount: int):
    cursor.execute("UPDATE users SET swarns = swarns - ? WHERE user_id = ? AND swarns > 0", (amount, user_id))
    conn.commit()


async def log_action(guild: discord.Guild, message: str):
    log_channel = guild.get_channel(CHANNEL_MOD_LOGS)
    if log_channel:
        embed = discord.Embed(description=message, color=discord.Color.orange(), timestamp=datetime.datetime.now())
        await log_channel.send(embed=embed)
    else:
        print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ —Å ID {CHANNEL_MOD_LOGS}")


@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

async def send_menu(user: discord.User):
    if user.id == ADMIN_USER_ID:
        await user.send("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", view=AdminMenu())
    else:
        await user.send("üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∫–∞'.", view=UserMenu())

@bot.event
async def on_member_join(member: discord.Member):
    if member.guild.id != GUILD_ID: return

   
    if guard_mode_active:
        account_age = datetime.datetime.now(datetime.timezone.utc) - member.created_at
        if account_age < datetime.timedelta(hours=24):
            await member.kick(reason="–†–µ–∂–∏–º –∑–∞—â–∏—Ç—ã: –ê–∫–∫–∞—É–Ω—Ç —Å–ª–∏—à–∫–æ–º –Ω–æ–≤—ã–π.")
            await log_action(member.guild, f"üõ°Ô∏è **–†–µ–∂–∏–º –∑–∞—â–∏—Ç—ã**: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –∫–∏–∫–Ω—É—Ç (–∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥).")
            return

    unverified_role = member.guild.get_role(ROLE_UNVERIFIED)
    if unverified_role: await member.add_roles(unverified_role)

    welcome_channel = bot.get_channel(CHANNEL_WELCOME)
    if welcome_channel:
        await welcome_channel.send(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.mention}! –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

    await send_menu(member)


@bot.tree.command(name="pban", description="–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞")
@app_commands.checks.has_permissions(ban_members=True)
async def pban(interaction: discord.Interaction, user: discord.Member, reason: str = "–ü–µ—Ä–º–∞–±–∞–Ω –æ—Ç –±–æ—Ç–∞"):
    await interaction.guild.ban(user, reason=reason)
    await interaction.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ ‚úÖ", ephemeral=True)
    await log_action(interaction.guild, f"üö´ **–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω**: {interaction.user.mention} –∑–∞–±–∞–Ω–∏–ª {user.mention}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.tree.command(name="ban", description="–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Ä–µ–º—è")
@app_commands.checks.has_permissions(ban_members=True)
async def ban(interaction: discord.Interaction, user: discord.Member, time: int, reason: str = "–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω –æ—Ç –±–æ—Ç–∞"):
    await interaction.guild.ban(user, reason=reason)
    await interaction.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {time} —Å–µ–∫. ‚úÖ", ephemeral=True)
    await log_action(interaction.guild, f"üî® **–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω**: {interaction.user.mention} –∑–∞–±–∞–Ω–∏–ª {user.mention} –Ω–∞ `{time}` —Å–µ–∫—É–Ω–¥. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await asyncio.sleep(time)
    await interaction.guild.unban(user)
    await log_action(interaction.guild, f"‚úÖ **–ê–≤—Ç–æ-—Ä–∞–∑–±–∞–Ω**: {user.mention} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω.")

@bot.tree.command(name="kick", description="–ö–∏–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@app_commands.checks.has_permissions(kick_members=True)
async def kick(interaction: discord.Interaction, user: discord.Member, reason: str = "–ö–∏–∫–Ω—É—Ç –±–æ—Ç–æ–º"):
    await user.kick(reason=reason)
    await interaction.response.send_message(f"{user.mention} –±—ã–ª –∫–∏–∫–Ω—É—Ç ‚úÖ", ephemeral=True)
    await log_action(interaction.guild, f"üë¢ **–ö–∏–∫**: {interaction.user.mention} –∫–∏–∫–Ω—É–ª {user.mention}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.tree.command(name="mute", description="–ú—É—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Ä–µ–º—è")
@app_commands.checks.has_permissions(moderate_members=True)
async def mute(interaction: discord.Interaction, user: discord.Member, time: int, reason: str = "–ú—É—Ç –æ—Ç –±–æ—Ç–∞"):
    await user.timeout(datetime.timedelta(seconds=time), reason=reason)
    await interaction.response.send_message(f"{user.mention} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {time} —Å–µ–∫. ‚úÖ", ephemeral=True)
    await log_action(interaction.guild, f"üîá **–ú—É—Ç**: {interaction.user.mention} –∑–∞–º—å—é—Ç–∏–ª {user.mention} –Ω–∞ `{time}` —Å–µ–∫—É–Ω–¥. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.tree.command(name="freeze", description="–§—Ä–∏–∑–∏—Ç —Å–µ—Ä–≤–µ—Ä")
@app_commands.checks.has_permissions(administrator=True)
async def freeze(interaction: discord.Interaction, time: int):
    role = discord.utils.get(interaction.guild.roles, name="–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ")
    if not role:
        role = await interaction.guild.create_role(name="–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ")
        for channel in interaction.guild.channels:
            await channel.set_permissions(role, send_messages=False)
    for member in interaction.guild.members:
        if not member.bot: await member.add_roles(role)
    await interaction.response.send_message(f"–í—Å–µ –∏–≥—Ä–æ–∫–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –Ω–∞ {time} —Å–µ–∫. ‚ùÑÔ∏è", ephemeral=True)
    await log_action(interaction.guild, f"‚ùÑÔ∏è **–§—Ä–∏–∑**: {interaction.user.mention} –∑–∞–º–æ—Ä–æ–∑–∏–ª —Å–µ—Ä–≤–µ—Ä –Ω–∞ `{time}` —Å–µ–∫—É–Ω–¥.")
    await asyncio.sleep(time)
    for member in interaction.guild.members:
        if role in member.roles: await member.remove_roles(role)
    await log_action(interaction.guild, f"‚úÖ **–ê–≤—Ç–æ-—Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞**: –°–µ—Ä–≤–µ—Ä —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω.")


@bot.tree.command(name="warn", description="–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@app_commands.checks.has_permissions(moderate_members=True)
@app_commands.choices(reason_type=[
    app_commands.Choice(name="Mute", value="mute"),
    app_commands.Choice(name="Kick", value="kick"),
    app_commands.Choice(name="Ban", value="ban"),
    app_commands.Choice(name="Swarn", value="swarn"),
])
async def warn(interaction: discord.Interaction, user: discord.Member, reason_type: app_commands.Choice[str], time: int, reason: str):
    duration_days = time
    add_warning(user.id, interaction.user.id, reason_type.value, duration_days)
    
    await log_action(interaction.guild, f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ**: {interaction.user.mention} –≤—ã–¥–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {user.mention} (—Ç–∏–ø: `{reason_type.name}`) –Ω–∞ `{duration_days}` –¥–Ω–µ–π. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    await interaction.response.send_message(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ `{reason_type.name}` –≤—ã–¥–∞–Ω–æ {user.mention} –Ω–∞ {duration_days} –¥–Ω–µ–π.", ephemeral=True)

    
    active_warns = get_active_warnings(user.id, reason_type.value)
    if active_warns >= 3:
        
        cursor.execute("DELETE FROM warnings WHERE user_id = ? AND reason_type = ?", (user.id, reason_type.value))
        conn.commit()
        
        if reason_type.value == "mute":
            await user.timeout(datetime.timedelta(hours=1), reason="–ê–≤—Ç–æ-–º—É—Ç –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            await log_action(interaction.guild, f"üîá **–ê–≤—Ç–æ-–º—É—Ç**: {user.mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 1 —á–∞—Å –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–∏–ø–∞ `Mute`.")
        elif reason_type.value == "kick":
            await user.kick(reason="–ê–≤—Ç–æ-–∫–∏–∫ –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            await log_action(interaction.guild, f"üë¢ **–ê–≤—Ç–æ-–∫–∏–∫**: {user.mention} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–∏–ø–∞ `Kick`.")
        elif reason_type.value == "ban":
            await interaction.guild.ban(user, reason="–ê–≤—Ç–æ-–±–∞–Ω –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", delete_message_days=0)
            await log_action(interaction.guild, f"üî® **–ê–≤—Ç–æ-–±–∞–Ω**: {user.mention} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 2 –¥–Ω—è –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–∏–ø–∞ `Ban`.")
            await asyncio.sleep(172800) # 2 –¥–Ω—è
            await interaction.guild.unban(user)
            await log_action(interaction.guild, f"‚úÖ **–ê–≤—Ç–æ-—Ä–∞–∑–±–∞–Ω**: {user.mention} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        elif reason_type.value == "swarn":
            new_swarn_count = add_swarn(user.id, 1)
            await log_action(interaction.guild, f"‚ÄºÔ∏è **–í—ã–¥–∞–Ω Super Warn**: {user.mention} –ø–æ–ª—É—á–∏–ª 1 `SWarn` (–≤—Å–µ–≥–æ: {new_swarn_count}) –∑–∞ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ç–∏–ø–∞ `Swarn`.")
            if new_swarn_count >= 2:
                await interaction.guild.ban(user, reason="–ê–≤—Ç–æ-–ø–µ—Ä–º–∞–±–∞–Ω –∑–∞ 2 Super Warns")
                await log_action(interaction.guild, f"üö´ **–ê–≤—Ç–æ-–ø–µ—Ä–º–∞–±–∞–Ω**: {user.mention} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω –∑–∞ 2 `SWarn`.")

@bot.tree.command(name="swarn", description="–í—ã–¥–∞—Ç—å Super Warn –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
@app_commands.checks.has_permissions(administrator=True)
async def swarn(interaction: discord.Interaction, user: discord.Member):
    new_swarn_count = add_swarn(user.id, 1)
    await log_action(interaction.guild, f"‚ÄºÔ∏è **–í—ã–¥–∞–Ω Super Warn**: {interaction.user.mention} –≤—ã–¥–∞–ª `SWarn` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention} (–≤—Å–µ–≥–æ: {new_swarn_count}).")
    await interaction.response.send_message(f"Super Warn –≤—ã–¥–∞–Ω {user.mention}. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {new_swarn_count} SWarn(s).", ephemeral=True)
    if new_swarn_count >= 2:
        await interaction.guild.ban(user, reason="–ü–µ—Ä–º–∞–±–∞–Ω –∑–∞ 2 Super Warns")
        await log_action(interaction.guild, f"üö´ **–ê–≤—Ç–æ-–ø–µ—Ä–º–∞–±–∞–Ω**: {user.mention} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω –∑–∞ 2 `SWarn`.")

@bot.tree.command(name="dwarn", description="–°–Ω—è—Ç—å –æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
@app_commands.checks.has_permissions(administrator=True)
async def dwarn(interaction: discord.Interaction, user: discord.Member, amount: int):
    removed_count = remove_warnings(user.id, amount)
    await interaction.response.send_message(f"–°–Ω—è—Ç–æ {removed_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å {user.mention}.", ephemeral=True)
    await log_action(interaction.guild, f"‚úÖ **–°–Ω—è—Ç–∏–µ –≤–∞—Ä–Ω–æ–≤**: {interaction.user.mention} —Å–Ω—è–ª `{removed_count}` –≤–∞—Ä–Ω–æ–≤ —Å {user.mention}.")

@bot.tree.command(name="dswarn", description="–°–Ω—è—Ç—å Super Warns")
@app_commands.checks.has_permissions(administrator=True)
async def dswarn(interaction: discord.Interaction, user: discord.Member, amount: int):
    remove_swarns(user.id, amount)
    await interaction.response.send_message(f"–°–Ω—è—Ç–æ {amount} SWarn(s) —Å {user.mention}.", ephemeral=True)
    await log_action(interaction.guild, f"‚úÖ **–°–Ω—è—Ç–∏–µ SWarn**: {interaction.user.mention} —Å–Ω—è–ª `{amount}` SWarn(s) —Å {user.mention}.")


@bot.tree.command(name="guard", description="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–π–¥–æ–≤")
@app_commands.checks.has_permissions(administrator=True)
async def guard(interaction: discord.Interaction):
    global guard_mode_active
    guard_mode_active = not guard_mode_active
    status = "–í–ö–õ–Æ–ß–ï–ù" if guard_mode_active else "–í–´–ö–õ–Æ–ß–ï–ù"
    color = discord.Color.green() if guard_mode_active else discord.Color.red()
    
    embed = discord.Embed(title="üõ°Ô∏è –†–µ–∂–∏–º –∑–∞—â–∏—Ç—ã", description=f"–°—Ç–∞—Ç—É—Å: **{status}**", color=color)
    if guard_mode_active:
        embed.add_field(name="–ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã:", value="- –ö–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥.\n- –£—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–ø–∞–º–∞ (3 —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ 5 —Å–µ–∫).", inline=False)
    
    await interaction.response.send_message(embed=embed, ephemeral=True)
    await log_action(interaction.guild, f"üõ°Ô∏è **–†–µ–∂–∏–º –∑–∞—â–∏—Ç—ã {status}** –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.mention}.")


class AdminMenu(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(discord.ui.Button(label="Ban", style=discord.ButtonStyle.danger, custom_id="admin_ban"))
        self.add_item(discord.ui.Button(label="Stats", style=discord.ButtonStyle.primary, custom_id="admin_stats"))
        self.add_item(discord.ui.Button(label="Info", style=discord.ButtonStyle.secondary, custom_id="admin_info"))

class UserMenu(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(discord.ui.Button(label="–ü—Ä–æ–≤–µ—Ä–∫–∞", style=discord.ButtonStyle.success, custom_id="user_check"))
        self.add_item(discord.ui.Button(label="–î–∞–Ω–Ω—ã–µ", style=discord.ButtonStyle.primary, custom_id="user_data"))

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if not interaction.data or "custom_id" not in interaction.data: return
    cid = interaction.data["custom_id"]
    guild = bot.get_guild(GUILD_ID)
    if not guild and cid in ["admin_ban", "admin_stats", "admin_info", "unban_"]:
        await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å GUILD_ID.", ephemeral=True)
        return
    if cid == "admin_ban":
        bans = [entry async for entry in guild.bans()]
        view = discord.ui.View()
        if not bans:
            await interaction.response.send_message("–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", ephemeral=True)
            return
        for entry in bans:
            view.add_item(discord.ui.Button(label=f"–†–∞–∑–±–∞–Ω–∏—Ç—å {entry.user}", style=discord.ButtonStyle.green, custom_id=f"unban_{entry.user.id}"))
        await interaction.response.send_message("–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö:", view=view, ephemeral=True)
    elif cid.startswith("unban_"):
        user_id = int(cid.split("_")[1])
        user = await bot.fetch_user(user_id)
        await guild.unban(user)
        await interaction.response.send_message(f"{user} —Ä–∞–∑–±–∞–Ω–µ–Ω ‚úÖ", ephemeral=True)
        await log_action(guild, f"‚úÖ **–†–∞–∑–±–∞–Ω (–∫–Ω–æ–ø–∫–∞)**: {interaction.user.mention} —Ä–∞–∑–±–∞–Ω–∏–ª {user}.")
    elif cid == "admin_stats":
        online = sum(1 for m in guild.members if m.status != discord.Status.offline)
        bots = sum(1 for m in guild.members if m.bot)
        await interaction.response.send_message(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {guild.member_count}\nüü¢ –û–Ω–ª–∞–π–Ω: {online}\nü§ñ –ë–æ—Ç–æ–≤: {bots}", ephemeral=True)
    elif cid == "admin_info":
        members = "\n".join([m.name for m in guild.members if not m.bot][:20])
        await interaction.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members}\n(–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 20)", ephemeral=True)
    elif cid == "user_check":
        code = str(random.randint(1000, 9999))
        captcha_codes[interaction.user.id] = code
        await interaction.response.send_message(f"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –ø—Ä–æ–≤–µ—Ä–∫—É.\n–í–≤–µ–¥–∏ –∫–æ–¥: `{code}`", ephemeral=True)
    elif cid == "user_data":
        data = get_user(interaction.user.id)
        if data:
            funpay, roblox, trust = (data[1] or "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"), (data[2] or "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"), data[4]
            await interaction.response.send_message(f"üìä –î–∞–Ω–Ω—ã–µ:\nFunPay: {funpay}\nRoblox: {roblox}\n–û—á–∫–∏ –¥–æ–≤–µ—Ä–∏—è: {trust}", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)


async def check_funpay(username: str):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'}
    url = f"https://funpay.com/users/{username}/"
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.get(url) as resp:
            return resp.status == 200

async def check_roblox(user_id: int):
    url = f"https://users.roblox.com/v1/users/{user_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get("name")
    return None

captcha_codes = {}
bad_words = ["–ø–ª–æ—Ö–æ–µ", "—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "http://", "discord.gg/"]
spam_tracker = {}

@bot.event
async def on_message(message: discord.Message):
    if message.author.bot: return

    
    if message.guild is None:
        author_id = message.author.id
        content_lower = message.content.lower()
        if author_id in captcha_codes:
            if message.content.strip() == captcha_codes[author_id]:
                del captcha_codes[author_id]
                await message.channel.send("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∂–∏ FunPay.\n–ù–∞–ø–∏—à–∏: `funpay –ù–ò–ö`")
            else:
                await message.channel.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∫–∞' –µ—â—ë —Ä–∞–∑.")
        elif content_lower.startswith("funpay "):
            username = message.content.split(" ", 1)[1]
            if await check_funpay(username):
                save_user(author_id, funpay=username)
                await message.channel.send(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç FunPay `{username}` –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∂–∏ Roblox.\n–ù–∞–ø–∏—à–∏: `roblox ID`")
            else:
                await message.channel.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç FunPay.")
        elif content_lower.startswith("roblox "):
            try:
                roblox_id = int(message.content.split(" ", 1)[1])
                name = await check_roblox(roblox_id)
                if name:
                    save_user(author_id, roblox=name, verified=1)
                    guild = bot.get_guild(GUILD_ID)
                    if guild:
                        member = guild.get_member(author_id)
                        if member:
                            role_verified = guild.get_role(ROLE_VERIFIED)
                            role_unverified = guild.get_role(ROLE_UNVERIFIED)
                            if role_unverified: await member.remove_roles(role_unverified)
                            if role_verified: await member.add_roles(role_verified)
                    await message.channel.send(f"‚úÖ Roblox –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω: {name}\n–¢—ã –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É!")
                else:
                    await message.channel.send("‚ùå Roblox –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except (IndexError, ValueError):
                await message.channel.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏ `roblox ID`, –≥–¥–µ ID - —ç—Ç–æ —á–∏—Å–ª–æ.")
        else:
            await send_menu(message.author)
        return

   
    if message.guild and message.guild.id == GUILD_ID:
        
        for word in bad_words:
            if word in message.content.lower():
                await message.delete()
                await message.channel.send(f"{message.author.mention}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ!", delete_after=10)
                await log_action(message.guild, f"üí¨ **–§–∏–ª—å—Ç—Ä —Å–ª–æ–≤**: {message.author.mention} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
                return

       
        user_id = message.author.id
        now = asyncio.get_event_loop().time()
        if user_id not in spam_tracker: spam_tracker[user_id] = []
        spam_tracker[user_id].append(now)
        spam_tracker[user_id] = [t for t in spam_tracker[user_id] if now - t < 5]

        
        spam_limit = 3 if guard_mode_active else 5
        
        if len(spam_tracker[user_id]) > spam_limit:
            await message.author.timeout(datetime.timedelta(minutes=5), reason="–°–ø–∞–º")
            await message.channel.send(f"{message.author.mention} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ø–∞–º!")
            await log_action(message.guild, f"üí® **–ê–Ω—Ç–∏-—Å–ø–∞–º**: {message.author.mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ø–∞–º.")
            spam_tracker[user_id] = []
            return

        add_trust(user_id, 1)
    await bot.process_commands(message)


@bot.tree.command(name="userdata", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@app_commands.checks.has_permissions(administrator=True)
async def userdata(interaction: discord.Interaction, member: discord.Member):
    data = get_user(member.id)
    if data:
        funpay, roblox, verified, trust, swarns = data[1] or "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω", data[2] or "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω", "–î–∞ ‚úÖ" if data[3] else "–ù–µ—Ç ‚ùå", data[4], data[5]
        active_mute_warns = get_active_warnings(member.id, 'mute')
        active_kick_warns = get_active_warnings(member.id, 'kick')
        active_ban_warns = get_active_warnings(member.id, 'ban')
        
        embed = discord.Embed(title=f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.display_name}", color=member.color, timestamp=datetime.datetime.now())
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.add_field(name="–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", value=f"FunPay: {funpay}\nRoblox: {roblox}\n–ü—Ä–æ–≤–µ—Ä–µ–Ω: {verified}", inline=False)
        embed.add_field(name="–†–µ–ø—É—Ç–∞—Ü–∏—è", value=f"–û—á–∫–∏ –¥–æ–≤–µ—Ä–∏—è: {trust}\nSuper Warns (SWarn): **{swarns}**", inline=False)
        embed.add_field(name="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", value=f"Mute: {active_mute_warns}/3\nKick: {active_kick_warns}/3\nBan: {active_ban_warns}/3", inline=False)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)

bot.run('your bot token here')

