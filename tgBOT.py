##Creating By Pr1me_StRel0k##

import json
import asyncio
import random
import datetime
from zoneinfo import ZoneInfo
from pathlib import Path

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

TELEGRAM_BOT_TOKEN = "Your Token Here"
ADMIN_CHAT_ID = ID Admin Chat
ADMIN_USER_ID = ID Admin User
USER_DATA_FILE = "tg_bot_users.json"

ABOUT_US_TEXT = """Your Text Here"""

GUARANTEES_TEXT = """Your Text Here"""

FAQ_TEXT = """Your Text Here"""

APP_TEXT =  """Your Text Here"""

prize_list = [
    "Your Text Here",
    "Your Text Here",
    "Your Text Here",
    "Your Text Here",
]


data_path = Path(USER_DATA_FILE)
state = {
    "tracked_users": set(),
    "music_history": {},
    "click_counts": {},
    "user_prizes": {},
    "user_support_messages": {},
    "user_support_count": {},
    "user_giveaway_count": {},
    "quick_giveaway_participants": set(),
    "user_daily_participation": set(),
}

def load_state():
    if data_path.exists():
        try:
            j = json.loads(data_path.read_text(encoding="utf-8"))
            state["tracked_users"] = set(j.get("tracked_users", []))
            state["music_history"] = j.get("music_history", {})
            state["click_counts"] = j.get("click_counts", {})
            state["user_prizes"] = j.get("user_prizes", {})
            state["user_support_messages"] = j.get("user_support_messages", {})
            state["user_support_count"] = j.get("user_support_count", {})
            state["user_giveaway_count"] = j.get("user_giveaway_count", {})
            state["quick_giveaway_participants"] = set(j.get("quick_giveaway_participants", []))
            state["user_daily_participation"] = set(j.get("user_daily_participation", []))
            print("State loaded.")
        except Exception as e:
            print(f"Failed to load state: {e}")

def save_state():
    try:
        j = {
            "tracked_users": list(state["tracked_users"]),
            "music_history": state["music_history"],
            "click_counts": state["click_counts"],
            "user_prizes": state["user_prizes"],
            "user_support_messages": state["user_support_messages"],
            "user_support_count": state["user_support_count"],
            "user_giveaway_count": state["user_giveaway_count"],
            "quick_giveaway_participants": list(state["quick_giveaway_participants"]),
            "user_daily_participation": list(state["user_daily_participation"]),
        }
        data_path.write_text(json.dumps(j, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        print(f"Failed to save state: {e}")

def record_user(user_id: int):
    if user_id not in state["tracked_users"]:
        state["tracked_users"].add(user_id)
        save_state()


def main_menu_keyboard():
    kb = [
        [InlineKeyboardButton("üéµ –ú—É–∑—ã–∫–∞", callback_data="music"), InlineKeyboardButton("üéÆ –ò–≥—Ä–∞", callback_data="game")],
        [InlineKeyboardButton("üéâ –†–æ–∑—ã–≥—Ä—ã—à", callback_data="giveaway"), InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="quick_giveaway")],
        [InlineKeyboardButton("üõí –¢–æ–≤–∞—Ä", url="your url here"), InlineKeyboardButton("üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about"), InlineKeyboardButton("üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏–∏", callback_data="guarantees")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"), InlineKeyboardButton("‚ùì FAQ", callback_data="faq")],
        [InlineKeyboardButton("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="app")],
    ]
    return InlineKeyboardMarkup(kb)


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    record_user(user.id)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=main_menu_keyboard())
    

async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data not in ["game_click", "quick_giveaway"]:
        await query.answer()
        
    user_id = query.from_user.id
    record_user(user_id)

    if query.data == "music":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="music_search")],
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="music_history")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
        ])
        await query.edit_message_text("üéµ –ú–µ–Ω—é –º—É–∑—ã–∫–∏:", reply_markup=kb)

    elif query.data == "music_search":
        context.user_data["awaiting_music_search"] = True
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç).")

    elif query.data == "music_history":
        hist = state["music_history"].get(str(user_id), [])
        if not hist:
            await query.message.reply_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            await query.message.reply_text("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n" + "\n".join(hist[-10:]))

    elif query.data == "game":
        click_count = state["click_counts"].get(str(user_id), 0)
        game_text = (
            f"üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—É!**\n\n"
            f"–í—ã –∫–ª–∏–∫–Ω—É–ª–∏: **{click_count}** —Ä–∞–∑(–∞).\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∫–ª–∏–∫–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑!"
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëÜ –ö–ª–∏–∫–Ω–∏ –º–µ–Ω—è!", callback_data="game_click")],
            [InlineKeyboardButton("üèÜ –ú–æ–∏ –≤—ã–∏–≥—Ä—ã—à–∏", callback_data="game_prizes")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
        await query.edit_message_text(game_text, reply_markup=kb, parse_mode="Markdown")

    elif query.data == "game_click":
        uid = str(user_id)
        cnt = state["click_counts"].get(uid, 0) + 1
        state["click_counts"][uid] = cnt
        
        click_msg = f"–í—ã –∫–ª–∏–∫–Ω—É–ª–∏ {cnt} —Ä–∞–∑(–∞)!"

        
        if random.randint(1, 100) == 50:
            prize = random.choice(prize_list)
            state["user_prizes"].setdefault(uid, []).append(prize)
            save_state() 
            
            prize_msg = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {prize}"
            
            await context.bot.send_message(chat_id=user_id, text=prize_msg)
            
            
            await query.answer(text="üéâ –í–´ –í–´–ò–ì–†–ê–õ–ò! üéâ\n–ü—Ä–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
        else:
            
            await query.answer(text=click_msg)
        
        save_state()


    elif query.data == "game_prizes":
        prizes = state["user_prizes"].get(str(user_id), [])
        back_button = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∏–≥—Ä—É", callback_data="game")
        
        if not prizes:
            text = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∫–ª–∏–∫–∞—Ç—å!"
        else:
            prize_list_text = "\n".join([f"‚Ä¢ {p}" for p in prizes])
            text = f"üèÜ –í–∞—à–∏ –≤—ã–∏–≥—Ä—ã—à–∏:\n\n{prize_list_text}"
            
        kb = InlineKeyboardMarkup([[back_button]])
        await query.edit_message_text(text=text, reply_markup=kb)


    elif query.data == "app":
        await query.edit_message_text(APP_TEXT, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))

    elif query.data == "giveaway":
        await query.message.reply_text("–£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à Discord (–ø—Ä–∏–º–µ—Ä: username#1234):")
        context.user_data["giveaway_step"] = "ask_discord"

    elif query.data == "support":
        await query.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):")
        context.user_data["support_step"] = "ask_support"

    elif query.data == "about":
        await query.edit_message_text(ABOUT_US_TEXT, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))

    elif query.data == "guarantees":
        await query.edit_message_text(GUARANTEES_TEXT, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))

    elif query.data == "profile":
        uid = str(user_id)
        support_count = state["user_support_count"].get(uid, 0)
        giveaway_count = state["user_giveaway_count"].get(uid, 0)
        msgs = state["user_support_messages"].get(uid, [])
        text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {query.from_user.full_name}\n\n–û–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {support_count}\n–£—á–∞—Å—Ç–∏–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö: {giveaway_count}"
        if msgs:
            text += "\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n" + "\n".join(msgs[-3:])
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        await query.edit_message_text(text, reply_markup=kb)

    elif query.data == "quick_giveaway":
        if user_id in state["user_daily_participation"]:
            await query.answer(
                "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.\n"
                "–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ 20:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ EEST (–ë—É—Ö–∞—Ä–µ—Å—Ç). –£–¥–∞—á–∏! üçÄ", 
                show_alert=True
            )
        else:
            state["quick_giveaway_participants"].add(user_id)
            state["user_daily_participation"].add(user_id)
            save_state()
            await query.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤ 20:00.", show_alert=True)

    elif query.data == "faq":
        await query.edit_message_text(FAQ_TEXT, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))

    elif query.data == "main_menu":
        await query.edit_message_text("–ú–µ–Ω—é:", reply_markup=main_menu_keyboard())



async def message_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)
    text = (update.message.text or "").strip()

    
    if context.user_data.get("awaiting_music_search"):
        query = text
        url = f"https://hitmo.org/search?q={query.replace(' ', '+')}"
        hist = state["music_history"].setdefault(uid, [])
        hist.append(query)
        state["music_history"][uid] = hist[-10:]
        save_state()
        await update.message.reply_text(f"üîé –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É *{query}*:\n{url}", parse_mode="Markdown")
        context.user_data.pop("awaiting_music_search", None)
        return

   
    if context.user_data.get("giveaway_step") == "ask_discord":
        context.user_data["giveaway_discord"] = text
        context.user_data["giveaway_step"] = "ask_screenshot"
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: imgur.com/...).")
        return

    if context.user_data.get("giveaway_step") == "ask_screenshot":
        screenshot = text
        discord_contact = context.user_data.get("giveaway_discord", "–ù–µ —É–∫–∞–∑–∞–Ω")
        embed_text = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à!\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user.mention_html()}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç Discord: {discord_contact}\n"
            f"–°–∫—Ä–∏–Ω: {screenshot}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}"
        )
        try:
            await context.application.bot.send_message(ADMIN_CHAT_ID, embed_text, parse_mode="HTML")
        except Exception as e:
            print(f"Failed to send giveaway to admin: {e}")
        state["user_giveaway_count"][uid] = state["user_giveaway_count"].get(uid, 0) + 1
        record_user(user.id)
        save_state()
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.")
        context.user_data.clear()
        return

    
    if context.user_data.get("support_step") == "ask_support":
        msg = text
        embed_text = (
            f"üõ†Ô∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user.mention_html()} ({user.id})\n"
            f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {msg}"
        )
        try:
            await context.application.bot.send_message(ADMIN_CHAT_ID, embed_text, parse_mode="HTML")
        except Exception as e:
            print(f"Failed to forward support: {e}")
        state["user_support_messages"].setdefault(uid, []).append(msg)
        state["user_support_count"][uid] = state["user_support_count"].get(uid, 0) + 1
        record_user(user.id)
        save_state()
        await update.message.reply_text("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        context.user_data.pop("support_step", None)
        return

    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /menu –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())



async def daily_tasks_loop(app):
    tz = ZoneInfo("Europe/Bucharest")
    while True:
        now = datetime.datetime.now(tz)

       
        if now.hour == 0 and now.minute == 0 and now.second < 30:
            print("Running daily reset for quick giveaway.")
            state["quick_giveaway_participants"].clear()
            state["user_daily_participation"].clear()
            save_state()
            try:
                await app.bot.send_message(ADMIN_CHAT_ID, "üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å! –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–±—Ä–æ—à–µ–Ω—ã.")
            except Exception as e:
                print(f"ERROR: Could not send daily reset message to admin chat: {e}")

        
        if now.hour == 20 and now.minute == 0 and now.second < 30:
            print("Running daily draw for quick giveaway.")
            participants = list(state["quick_giveaway_participants"])
            if participants:
                winners = random.sample(participants, min(10, len(participants)))
                winner_mentions = ", ".join([f"[{w}](tg://user?id={w})" for w in winners])
                text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n{winner_mentions}"
                try:
                    await app.bot.send_message(ADMIN_CHAT_ID, text, parse_mode="Markdown")
                except Exception as e:
                    print(f"ERROR: Could not send winners list to admin chat: {e}")
                
                for w in winners:
                    try:
                        await app.bot.send_message(w, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞!")
                    except Exception as e:
                        print(f"ERROR: Could not send prize message to winner {w}: {e}")
            else:
                try:
                    await app.bot.send_message(ADMIN_CHAT_ID, "üì¢ –°–µ–≥–æ–¥–Ω—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –±—ã–ª–æ.")
                except Exception as e:
                    print(f"ERROR: Could not send 'no participants' message to admin chat: {e}")

        await asyncio.sleep(25)



async def on_startup(app):
    load_state()
    app.create_task(daily_tasks_loop(app))
    print("Bot started, background tasks running.")

async def on_shutdown(app):
    save_state()
    print("Shutting down, state saved.")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if ADMIN_USER_ID == 0:
        await update.message.reply_text("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: ADMIN_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–¥–µ. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º.")

    user_count = len(state['tracked_users'])
    await update.message.reply_text(f"üìà –í—Å–µ–≥–æ –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å: {user_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

   
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("stats", stats_command))

    
    app.add_handler(CallbackQueryHandler(callback_router))

    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_router))

   
    app.post_init = on_startup
    app.post_shutdown = on_shutdown

    print("Starting polling...")
    app.run_polling()

if __name__ == "__main__":

    main()
